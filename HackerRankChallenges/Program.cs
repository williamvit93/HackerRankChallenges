using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace HackerRankChallenges
{
    class Program
    {
        static void Main(string[] args)
        {
            //Console.WriteLine(dayOfProgrammer(2400));
            //Staircase(10);
            //var bill = new List<int>() { 3, 10, 2, 9 };
            //bonAppetit(bill, 1, 7);

            //int[] ar = new int[] { 1, 1, 3, 1, 2, 1, 3, 3, 3, 3 };
            //Console.WriteLine(sockMerchant(10, ar));

            //Console.WriteLine(pageCount(7, 4));
            //countingValleys(12, "DDUUDDUDUUUD");

            //var d = 539855; //resultado 539854
            //var keyboards = new int[] { 380710, 674456, 878173, 532602, 868253, 721585, 806107, 141310, 790209, 212031, 304748, 818920, 80938, 322601, 403071, 22899, 173564, 153826, 695108, 223665, 346178, 957539, 975830, 573171, 641117, 932941, 822666, 575293, 132555, 479463, 862209, 313799, 922966, 606508, 487172, 139230, 606390, 898464, 764983, 829520, 174879, 317603, 502680, 953013, 398753, 825387, 146407, 666457, 367618, 121790, 68188, 478342, 25818, 506222, 135197, 232604, 963333, 79984, 549654, 776899, 966040, 122063, 432596, 594425, 311887, 936661, 506256, 876303, 439611, 277816, 105689, 851641, 640971, 333, 216087, 17692, 619728, 602689, 650348, 364881, 152060, 386548, 61364, 564569, 780938, 191826, 459905, 211804, 58177, 484711, 995091, 754424, 57794, 619638, 695192, 297423, 983901, 430435, 239234, 170704, 142282, 74647, 121413, 782873, 303344, 265448, 101069, 177807, 692318, 691774, 62306, 618191, 509537, 633333, 996922, 228947, 814154, 232698, 615359, 220853, 306323, 173792, 624037, 655872, 527161, 848207, 426180, 724481, 130740, 792273, 886804, 404890, 449886, 654224, 194667, 354317, 367843, 525624, 414224, 481744, 827725, 176927, 733780, 387166, 769479, 964040, 11034, 248637, 416248, 133834, 481453, 418675, 19197, 790516, 259872, 582280, 760462, 681129, 137141, 189738, 535431, 619088, 215251, 323574, 12124, 834492, 241256, 629441, 976094, 198902, 801718, 64632, 959793, 42643, 487964, 371493, 109761, 265912, 548083, 646236, 454480, 499447, 844548, 266080, 98105, 149272, 488352, 127229, 150083, 864856, 324750, 243533, 737524, 651858, 476126, 810869, 375973, 614220, 394566, 859759, 459551, 392483, 785194, 956438, 892286, 133175, 955550, 102173, 787081, 658841, 315478, 943044, 688290, 809066, 437702, 76435, 254728, 279431, 841061, 930529, 38436, 253116, 901966, 781347, 461582, 825319, 637346, 495564, 659503, 386436, 895320, 450226, 636814, 227016, 614072, 889592, 66668, 450722, 518525, 882659, 150203, 105718, 737600, 988498, 512338, 443373, 680382, 47842, 41683, 38031, 84812, 746376, 716485, 659184, 72101, 802312, 71273, 105392, 12112, 35579, 956717, 508694, 737675, 387683, 353331, 462052, 296603, 991812, 349783, 970969, 774829, 942528, 661520, 784020, 185238, 354922, 174149, 412224, 98418, 549740, 660452, 830722, 764545, 68729, 265107, 424393, 20950, 82637, 82191, 514774, 968079, 899104, 295512, 782662, 769397, 227894, 624805, 976211, 382026, 667501, 205734, 10431, 121414, 255472, 615152, 260773, 774809, 69270, 644050, 960043, 530422, 478364, 41961, 896017, 968707, 322289, 798895, 125262, 292888, 474443, 980192, 113983, 602018, 486125, 582554, 920505, 748242, 520886, 811953, 616639, 656627, 156674, 128125, 43746, 338344, 110833, 928293, 598667, 224667, 95034, 372251, 376078, 432175, 550216, 439504, 388741, 613078, 163721, 943289, 273853, 240747, 928527, 121529, 676135, 197515, 496160, 887125, 12718, 645957, 992639, 285972, 671607, 816131, 316994, 861565, 879467, 846706, 258490, 919134, 544140, 252298, 636215, 755213, 221114, 460644, 978618, 842189, 748361, 728655, 557939, 776623, 180636, 656310, 53871, 177469, 320132, 545150, 753358, 984892, 269392, 937600, 539678, 43184, 728112, 164852, 107969, 131759, 685453, 726144, 91892, 817970, 965348, 213560, 488505, 505967, 150711, 840893, 342461, 732967, 413510, 542360, 758356, 590481, 743592, 508476, 612079, 297616, 105955, 565150, 151604, 689041, 93779, 873520, 577303, 636435, 877337, 761293, 433899, 160108, 160885, 461662, 558169, 9334, 811936, 246735, 741880, 726626, 881650, 992034, 277965, 99201, 193998, 401585, 880015, 800252, 657709, 204082, 310999, 555210, 742516, 733237, 815303, 616125, 615117, 188068, 688040, 355465, 375345, 783969, 538818, 554352, 524278, 5231, 848239, 761163, 840154, 35320, 832869, 745902, 11035, 202527, 749715, 958290, 758848, 368024, 678532, 327006, 756436, 148922, 842161, 305674, 470425, 876849, 502164, 996559, 124743, 368393, 385463, 448712, 643511, 722234, 780576, 886396, 217259, 593178, 137854, 391614, 663192, 412715, 1881, 695775, 178413, 3219, 29078, 619729, 166923, 355574, 181361, 794377, 387761, 93012, 402418, 588335, 874460, 481082, 510225, 642471, 723568, 64869, 104161, 580115, 225490, 561612, 703102, 560787, 52816, 603624, 486708, 676621, 599504, 805171, 602282, 269882, 22938, 825236, 322181, 498368, 636635, 77076, 149034, 58565, 695573, 334314, 746094, 785074, 982191, 707841, 209890, 788793, 825317, 517386, 520414, 440299, 373547, 147486, 122405, 328267, 735672, 434118, 235911, 88621, 371506, 220662, 62557, 598361, 801548, 735829, 766762, 998573, 733782, 933324, 299511, 642710, 173520, 421343, 637697, 636321, 496279, 785829, 178293, 118363, 686066, 409998, 991350, 839992, 747388, 383920, 740154, 572002, 950527, 587902, 202983, 184518, 565678, 362318, 979868, 334587, 165332, 26203, 700410, 24198, 585943, 831885, 586612, 273133, 697828, 518196, 929827, 298793, 782759, 940892, 56149, 259356, 852921, 429754, 225593, 872927, 377000, 842124, 461837, 186144, 481015, 802825, 435279, 458291, 937565, 483078, 706179, 133511, 631313, 80620, 49854, 728104, 904117, 496573, 909596, 436950, 780389, 729673, 7031, 765686, 57294, 158944, 225275, 610363, 131379, 135385, 398926, 751545, 922831, 657104, 472167, 956831, 13406, 68974, 282810, 57068, 44605, 282251, 36296, 261765, 275782, 247035, 275675, 906459, 787304, 249603, 975055, 272011, 371291, 759570, 428984, 449842, 844980, 776886, 268200, 65381, 156418, 487682, 853282, 33622, 46512, 62668, 619840, 906642, 562120, 139277, 345999, 532541, 315261, 411189, 772032, 347422, 86445, 900037, 236838, 21829, 732614, 663940, 548445, 963612, 128018, 560295, 882335, 937034, 393537, 52270, 828055, 418888, 787891, 260217, 624567, 730986, 494593, 981519, 979772, 256588, 144998, 654322, 725320, 198143, 191234, 565458, 338340, 464037, 308769, 972225, 947250, 608665, 967575, 349586, 183057, 114122, 22041, 151281, 720171, 225368, 418085, 251024, 88861, 850808, 683909, 561350, 545229, 523509, 980738, 114795, 227461, 860334, 404069, 722978, 542669, 67684, 791879, 707995, 548963, 543661, 613039, 81744, 226198, 458404, 847110, 484806, 428728, 165812, 140992, 945912, 664338, 850167, 216140, 669174, 97585, 462400, 862182, 411859, 460266, 651121, 749453, 545555, 290654, 62288, 787148, 512619, 111962, 806586, 356054, 459344, 978283, 51969, 794169, 786456, 497368, 201410, 339855, 258680, 872333, 164744, 544971, 330290, 758596, 756922, 754278, 519503, 17950, 204928, 126283, 878028, 659778, 879780, 161657, 870775, 255551, 238851, 946852, 451341, 560309, 985212, 750899 };
            //var drives = new int[] { 772187, 558107, 27174, 552639, 65220, 94174, 464036, 343741, 909426, 282495, 538824, 390817, 497925, 798525, 105498, 372017, 656929, 451799, 822289, 397471, 380506, 93430, 775787, 441172, 964694, 195654, 203813, 186766, 523448, 94058, 287203, 356752, 793034, 757653, 577724, 276504, 634726, 312420, 798094, 642820, 396060, 195885, 915297, 897160, 533149, 520308, 157991, 447704, 696056, 557946, 793441, 166072, 316834, 613612, 857373, 363183, 906348, 897389, 276967, 168893, 983744, 507166, 140744, 598248, 202062, 33392, 184267, 363776, 894192, 732801, 654440, 820563, 152139, 313233, 440423, 798774, 615437, 967974, 83483, 857067, 882616, 117671, 803785, 739897, 505321, 319739, 967345, 988639, 417856, 485469, 984333, 122462, 668071, 725349, 634815, 323084, 165993, 997303, 882127, 980004, 427586, 656282, 162270, 129856, 12611, 687016, 559882, 93052, 527519, 29371, 719516, 823144, 890459, 209801, 79425, 379113, 731662, 973677, 187455, 336917, 858371, 296557, 819249, 918415, 540916, 110774, 710403, 759754, 314421, 988289, 471275, 901500, 821822, 651815, 459369, 314132, 357879, 254380, 494324, 819440, 828436, 880021, 335284, 525554, 173801, 244395, 712175, 112969, 826165, 87200, 100661, 719240, 239929, 420214, 142004, 905564, 348020, 739838, 450453, 191304, 748996, 613916, 651295, 435604, 621069, 577380, 352455, 738236, 841638, 806378, 471394, 843928, 979326, 254033, 634285, 31123, 126294, 739462, 676330, 106368, 325178, 314991, 686482, 3818, 69657, 681824, 174921, 167170, 855931, 655431, 227231, 991967, 837230, 72688, 279340, 77096, 643027, 340457, 694307, 866582, 512771, 215579, 305380, 360460, 212693, 68521, 33197, 763328, 304015, 408399, 653310, 759420, 938517, 903812, 871401, 232816, 766238, 807578, 788625, 59108, 665135, 899050, 260346, 650916, 907400, 874424, 670884, 189, 560567, 169120, 111015, 389848, 447157, 379589, 460462, 226782, 864759, 381698, 546772, 128878, 380487, 412855, 977021, 802536, 110746, 479178, 422644, 18005, 42035, 421539, 740071, 27182, 918284, 966462, 280101, 127483, 858536, 707848, 292285, 972996, 910976, 826226, 754132, 699473, 805089, 839651, 18011, 982020, 963028, 621485, 726835, 559311, 304820, 628380, 829582, 532796, 281585, 635233, 872951, 449944, 112606, 218493, 703845, 120275, 540821, 68357, 96557, 263376, 241949, 46134, 12407, 567299, 468874, 283893, 301334, 824721, 598493, 74258, 297305, 226403, 299987, 730411, 743361, 598944, 48154, 64506, 903099, 877438, 852456, 877460, 667956, 330483, 593356, 340483, 892504, 989252, 185372, 626318, 78987, 531437, 239565, 838341, 794758, 285355, 34679, 429280, 582939, 267837, 995662, 789339, 855889, 573479, 521564, 658974, 63656, 252365, 831561, 220275, 599114, 488485, 114959, 737732, 93879, 525359, 909832, 32654, 669352, 868748, 829474, 64702, 879177, 956040, 571902, 25148, 517563, 694607, 430525, 82226, 317018, 910882, 434694, 464538, 774054, 137555, 602060, 340893, 892725, 164862, 443480, 170621, 607227, 948322, 631450, 445347, 591831, 788980, 702793, 639750, 237487, 676579, 512480, 131724, 104249, 234238, 384598, 786928, 487777, 970985, 652372, 262735, 950746, 271630, 600787, 473004, 743762, 984062, 506381, 269020, 634247, 407064, 70949, 891681, 254449, 2922, 361935, 39775, 472600, 604208, 45660, 907585, 140056, 238911, 276877, 469748, 971752, 450567, 331422, 473078, 482150, 622660, 196142, 469850, 610918, 447569, 280747, 474396, 207040, 591001, 516689, 537129, 5508, 854329, 7666, 49509, 219119, 833505, 36730, 844115, 108051, 284973, 338937, 462957, 802767, 438638, 572178, 218560, 512784, 396887, 293555, 44398, 931964, 277885, 397105, 816867, 87113, 284627, 617206, 818391, 113865, 531720, 345301, 880061, 507527, 574910, 874420, 29675, 493658, 675573, 702417, 44864, 993041, 450699, 131519, 929637, 274794, 165242, 394665, 389961, 421924, 730025, 411114, 882458, 907816, 671095, 714194, 258232, 608043, 674760, 309443, 296795, 823976, 718592, 955276, 954249, 821384, 721556, 1566, 863075, 636545, 2105, 51147, 717734, 257666, 829775, 59539, 40568, 603932, 871795, 686745, 256753, 114514, 665442, 383926, 800536, 456340, 662814, 369137, 92306, 121053, 596456, 419043, 549708, 751348, 900525, 71024, 404331, 80199, 321154, 354852, 750020, 941938, 412769, 668724, 646242, 678823, 646596, 362002, 888240, 593795, 598828, 10134, 502267, 636240, 138903, 913493, 115764, 612712, 154357, 873896, 171888, 724137, 638021, 120586, 741149, 902657, 530111, 66459, 829205, 534088, 991487, 142170, 820198, 11710, 695039, 422130, 532613, 295108, 448955, 486110, 84412, 577330, 399459, 43749, 910340, 123032, 808205, 558769, 216101, 343245, 466713, 729338, 816908, 652439, 67400, 845795, 387480, 692649, 852034, 430028, 403989, 673119, 77633, 275444, 542657, 306383, 861937, 789163, 590419, 446521, 226331, 798561, 384327, 822608, 450225, 857756, 579397, 916842, 759523, 431083, 98896, 318939, 889853, 582330, 12313, 371257, 370136, 601210, 27427, 705745, 393063, 688561, 525932, 374638, 511797, 166898, 165666, 430627, 645886 };
            //var d = 374625; //resultado 374625
            // var keyboards = new int[] { 183477, 732159, 779867, 598794, 596985, 156054, 445934, 156030, 99998, 58097, 459353, 866372, 333784, 601251, 142899, 708233, 651036, 20590, 56425, 970129, 722162, 832631, 938765, 212387, 779, 181866, 992436, 183446, 617621, 304311, 611791, 524875, 7068, 432043, 23068, 291295, 524893, 611991, 399952, 139526, 46677, 292211, 973975, 366445, 232824, 456173, 90627, 785353, 618526, 199719, 382549, 514351, 983453, 592549, 466869, 46461, 860135, 607682, 680461, 170563, 450601, 65067, 13268, 949100, 942415, 965850, 563416, 808580, 385504, 304683, 15970, 97695, 230946, 684388, 241080, 440252, 683418, 122066, 610135, 495289, 833383, 34397, 173404, 909526, 391149, 258839, 182278, 662672, 755532, 311782, 425252, 520186, 207989, 546834, 567829, 184897, 31321, 969804, 842475, 775308, 449856, 939711, 395240, 895029, 926868, 598035, 727436, 922082, 326615, 88513, 570573, 196028, 520952, 45238, 961389, 325404, 844725, 388765, 747489, 271411, 539814, 828925, 586884, 356834, 965473, 280998, 607171, 542819, 276062, 140956, 296341, 802378, 165305, 74568, 15640, 987110, 423497, 772419, 394971, 198761, 293555, 5524, 14083, 815646, 198888, 707017, 711503, 729172, 790354, 771445, 606097, 74062, 926510, 358547, 651224, 115896, 915166, 863298, 850231, 623439, 449552, 330973, 95432, 63573, 370902, 311053, 668992, 325257, 666073, 729771, 591431, 637702, 274784, 887413, 561370, 472322, 383014, 119622, 971931, 713406, 849106, 760957, 721893, 561404, 236039, 771141, 256127, 493907, 40443, 522851, 710823, 427638, 110916, 25425, 439436, 107916, 201765, 31437, 895966, 636554, 475478, 314427, 563403, 508686, 695673, 907771, 139363, 249349, 604554, 410476, 539963, 755722, 203107, 228850, 943066, 76998, 599001, 289817, 694942, 161258, 880667, 929908, 624495, 808303, 295701, 633547, 105519, 871657, 456638, 803854, 218490, 186613, 416604, 892761, 883480, 539464, 324419, 807623, 122116, 896294, 356379, 318076, 907033, 110077, 272194, 227987, 647837, 427205, 521, 818200, 352649, 860925, 304850, 6954, 164693, 510863, 534210, 417506, 484940, 222158, 692593, 119893, 269474, 337692, 244181, 943123, 168329, 323276, 218814, 518908, 558228, 703178, 403928, 363712, 64907, 972001, 253973, 962665, 246932, 251840, 696462, 497361, 712432, 300947, 148121, 284905, 997966, 36896, 266842, 609702, 976835, 502793, 411130, 51491, 33059, 278710, 345149, 908471, 634495, 239616, 680859, 144928, 531055, 489564, 447885, 985873, 553018, 242110, 592831, 672287, 80872, 761792, 369738, 237692, 242215, 728381, 803321, 367866, 470407, 632449, 983645, 633673, 398915, 535896, 816616, 90311, 798525, 835491, 150752, 320853, 508314, 186561, 695970, 40785, 858553, 591027, 326033, 677717, 220291, 16592, 711310, 512209, 809684, 226547, 348745, 645319, 96199, 174406, 940736, 691094, 397662, 386823, 517868, 936942, 837899, 137552, 675843, 341144, 735382, 113500, 209119, 924902, 541570, 877537, 695942, 258000, 228602, 660133, 174995, 817407, 982390, 555326, 516753, 529770, 260888, 241907, 996479, 93124, 965637, 897418, 558420, 900621, 882836, 633245, 188750, 339107, 278935, 349289, 700516, 726120, 846852, 897313, 856518, 887287, 404600, 780052, 887971, 642177, 851121, 84159, 935846, 161666, 785518, 898757, 669139, 606566, 580818, 9200, 372367, 101495, 940346, 663652, 973884, 5063, 283985, 160845, 305433, 548858, 485724, 692052, 448526, 652109, 994682, 224320, 175965, 712340, 18080, 237303, 494005, 325474, 178863, 746660, 366552, 649780, 744339, 849415, 721103, 657762, 308131, 568437, 542663, 93696, 508929, 367799, 636476, 265263, 250519, 244045, 590004, 973230, 979114, 393187, 486852, 892248, 906303, 631281, 434493, 794991, 350158, 502751, 645249, 577034, 669075, 492629, 864363, 195287, 230238, 722615, 499306, 280836, 572134, 24322, 768728, 645618, 43614, 177151, 994775, 940671, 470051, 954144, 279624, 915071, 883694, 370243, 747888, 15461, 953287, 928528, 330825, 428281, 552890, 966873, 572422, 963838, 980553, 853202, 75364, 294516, 305766, 385185, 190955, 851329, 268536, 316994, 485390, 169531, 372771, 556927, 394781, 936366, 844404, 696187, 930227, 570190, 70432, 97199, 208966, 615146, 671295, 990277, 358728, 140116, 254221, 518447, 295358, 877571, 322624, 740936, 848861, 697173, 136653, 702643, 709071, 359573, 552945, 293658, 296577, 809544, 419876, 810296, 256265, 867268, 611652, 913447, 81613, 511458, 5187, 501630, 628036, 798476, 194318, 650111, 70957, 702126, 396874, 795972, 50780, 890206, 886817, 338072, 27623, 375668, 578996, 94004, 438573, 578411, 672178, 35951, 328227, 465703, 155077, 542767, 982063, 286606, 839123, 590967, 860599, 30508, 250308, 37357, 38844, 822786, 303334, 360272, 537204, 127090, 326725, 522361, 828056, 770168, 271605, 215870, 965470, 623031, 457369, 85367, 842213, 51694, 194424, 531475, 411447, 540757, 699670, 637574, 138385, 726255, 132776, 976072, 969756, 516417, 714757, 323030, 41077, 795366, 398911, 270894, 433619, 439071, 744211, 78475, 250918, 25357, 184376, 962866, 80892, 836169, 428411, 696131, 688655, 409046, 58207, 173334, 915420, 156473, 442452, 250300, 239842, 549351, 93895, 714757, 182908, 660347, 934825, 279997, 638415, 955081, 516813, 738064, 657260, 554479, 435772, 611859, 730204, 419695, 47727, 247787, 566165, 356053, 158683, 758017, 120192, 14397, 341957, 116099, 91820, 46014, 94179, 40738, 311484, 855654, 979732, 703817, 175370, 474281, 17165, 97857, 763537, 491727, 807095, 473579, 346383, 173241, 464779, 433950, 649921, 398595, 48070, 615989, 949360, 635237, 886881, 45315, 260953, 374698, 15308, 626001, 933647, 503250, 501153, 856683, 539499, 658843, 684118, 162972, 615990, 70585, 944105, 642564, 944465, 26518, 867395, 585908, 636547, 940443, 801130, 575604, 677321, 388258, 573497, 643434, 128530, 458357, 811387, 545740, 820825, 941677, 626081, 386190, 820612, 961408, 651632, 905555, 206731, 195836, 274023, 69377, 214638, 100801, 377345, 18226, 38972, 94465, 618394, 683161, 336631, 71205, 655871, 319048, 385484, 845066, 681768, 23278, 340702, 814652, 260754, 281919, 496150, 118192, 693047, 696895, 348416, 629085, 936860, 877670, 39196, 735237, 418041, 803662, 967799, 282099, 548096, 177480, 423567, 750784, 568649, 807017, 576055, 990729, 731813, 412711, 127719, 372102, 250073, 776588, 580675, 340881, 867312, 930967, 561994, 858607, 238651, 429091, 679998, 751041, 740076, 754713, 238290 };
            //var drives = new int[] { 103148, 377814, 902757, 534448, 505367, 496674, 826644, 389706, 320122, 297703, 895725, 100008, 389290, 53498, 10841, 958758, 905586, 847334, 91308, 354986, 319386, 957017, 950276, 676923, 950822, 482630, 573568, 493137, 631980, 83304, 448547, 91725, 293277, 602577, 328739, 553828, 672670, 212776, 752545, 946408, 791758, 781473, 789797, 113491, 91227, 931139, 494532, 974468, 57572, 996156, 549653, 55884, 441630, 737202, 887905, 546039, 350995, 705991, 117094, 968871, 143024, 688185, 761683, 837153, 618358, 867064, 101146, 838670, 84126, 426188, 701128, 222627, 72780, 396741, 822046, 892098, 706402, 146638, 81368, 513442, 84857, 233281, 986862, 581437, 374356, 863333, 370726, 880559, 812983, 236739, 947462, 907899, 986224, 592023, 753548, 350298, 376345, 708341, 83520, 481776, 777322, 378073, 558531, 705244, 424318, 248781, 906559, 330327, 111223, 434550, 492737, 253740, 11357, 405294, 468767, 571602, 56316, 741141, 118845, 767368, 117553, 822976, 649357, 744380, 746213, 681193, 583501, 237560, 962390, 400314, 374956, 477823, 285777, 82910, 868795, 528490, 223647, 436435, 963440, 802290, 12158, 978121, 970098, 556131, 43170, 322760, 891344, 43411, 527820, 924852, 993189, 919323, 73814, 253048, 553980, 695568, 969521, 75452, 523216, 166253, 629541, 216858, 695906, 294561, 454644, 996056, 627700, 697083, 584446, 384289, 901362, 737267, 45457, 915461, 281027, 958919, 950626, 57877, 890465, 394611, 455760, 106781, 620273, 335736, 277444, 169719, 188164, 646995, 463803, 388356, 353432, 229447, 583788, 265998, 77753, 360427, 974615, 260009, 986433, 453343, 698319, 32324, 536218, 279827, 309598, 411300, 813979, 602918, 684886, 271019, 162654, 133216, 911133, 76218, 822723, 940744, 950014, 416733, 725883, 581294, 613554, 919384, 418338, 82768, 932939, 876859, 866259, 551713, 45229, 164872, 26373, 411348, 376549, 777778, 810736, 480479, 987499, 985509, 150451, 376824, 594265, 749748, 380977, 393078, 970133, 829352, 842309, 569210, 838518, 63527, 468799, 36831, 414913, 133883, 273469, 13676, 56389, 75377, 864918, 691871, 813085, 534467, 999943, 750080, 996862, 913372, 555557, 585282, 769161, 726285, 944979, 757252, 849839, 377936, 247404, 241140, 450646, 205092, 129189, 251500, 954266, 274794, 606312, 207275, 228695, 878419, 671852, 757170, 618268, 46908, 358244, 268734, 113584, 22190, 671725, 498278, 520425, 476318, 772493, 831559, 520281, 307847, 852374, 816570, 552032, 968192, 561065, 88429, 876852, 791997, 403574, 590089, 134046, 480155, 28790, 420631, 755308, 784846, 620450, 639506, 704239, 805227, 213013, 903355, 136403, 617403, 14548, 980684, 350667, 608225, 590051, 636788, 392333, 554941, 437574, 91023, 904363, 726561, 348334, 547570, 514106, 451013, 783830, 910677, 396633, 298027, 622227, 523721, 862558, 697800, 949735, 796652, 147107, 459451, 926797, 842282, 492228, 769091, 258303, 66251, 459240, 45872, 980254, 620946, 492730, 347492, 328826, 209178, 633544, 579781, 240200, 341641, 75881, 537385, 128909, 460223, 128075, 584898, 151937, 400391, 138859, 697825, 641020, 180108, 181922, 696659, 345746, 411754, 896991, 874515, 474069, 515353, 667709, 973330, 172359, 602071, 192333, 223900, 40878, 821976, 168974, 345161, 278654, 347698, 177051, 31812, 88723, 548839, 120664, 534544, 460883, 356072, 206381, 894419, 364352, 128778, 503531, 330174, 690551, 321656, 39321, 92312, 799591, 481254, 628042, 687940, 81778, 511773, 873776, 157014, 921080, 377371, 61092, 2596, 276941, 868497, 806383, 84537, 748429, 597413, 184563, 986480, 209397, 536712, 370556, 924250, 484633, 236170, 618395, 760127, 368997, 531386, 462639, 720679, 747640, 62356, 36692, 147773, 252494, 133147, 713511, 687321, 895409, 844631, 511793, 749786, 532234, 30480, 107197, 867411, 447514, 354227, 532738, 397254, 242526, 104893, 269304, 737572, 377370, 182325, 20076, 564093, 322152, 840900, 211496, 89225, 327572, 535457, 119790, 233269, 890728, 343005, 593727, 474077, 679256, 355185, 789350, 648969, 498555, 479691, 86940, 584332, 537228, 736989, 586974, 557868, 745608, 586668, 431757, 564586, 127610, 378858, 283840, 337523, 363165, 899851, 646063, 607693, 570907, 244409, 356177, 498360, 986738, 330423, 605912, 933903, 237281, 7537, 101806, 225384, 152894, 365440, 246014, 487920, 160718, 851010, 186610, 87908, 285160, 806047, 173413, 55667, 896968, 842504, 80252, 51648, 524630, 18247, 410490, 697119, 982600, 997481, 112065, 896813, 397946, 576129, 969689, 917603, 865703, 5302, 817257, 975287, 257961, 490860, 170927, 723059, 668794, 821047, 929586, 718620, 556889, 535158, 571742, 476727, 280043, 838772, 769667, 205124, 187086, 968213, 323753, 711113, 425533, 199552, 507725, 736414, 242465, 529960, 114863, 707390, 610758, 767953, 288696, 87310, 581370, 506218, 154398, 932225, 481249, 320715, 532710, 594017, 51836, 369314, 336681, 454371, 134445, 548727, 63390, 549046, 990184, 201776, 322427, 684726, 810057, 87888, 254699, 138857, 681657, 2712, 760400, 116723, 595773, 473273, 471683, 606239, 411934, 794469, 348947, 106724, 929739, 850920, 830807, 746143, 965245, 408611, 124326, 933149, 731033, 991153, 938552, 205048, 181274, 379315, 66512, 926659, 741288, 721760, 574603, 48106, 842019, 781691, 139804, 828128, 795447, 750671, 201673, 799718, 163693, 825319, 164303, 186447, 814759, 235745, 665348, 633902, 523184, 908071, 358912, 316268, 877399, 588440, 392534, 683136, 816784, 452051, 439234, 713944, 377030, 899871, 462785, 624243, 301446, 539903, 747778, 438844, 502834, 577617, 232266, 355443, 899778, 391571, 383978, 531978, 543676, 66635, 906677, 229077, 624379, 542972, 116925, 431626, 940044, 332891, 627850, 730714, 334982, 693874, 139304, 166769, 794205, 878828, 620213, 495536, 533582, 741628, 894094, 573280, 788775, 997918, 151710, 752573, 311793, 707140, 248546, 778748, 744114, 143161, 33540, 204591, 570019, 714225, 762631, 494093, 876964, 754806, 342159, 102940, 821443, 536603, 110657, 378907, 846643, 457104, 127518, 604094, 397377, 502402, 797475, 539983, 149952, 486468, 229304, 409048, 722416, 772056, 720199, 12206, 641293, 598578, 694105, 565636, 542847, 716341, 251856, 599165, 345774, 826986, 181639, 959291, 908656, 342602, 583524, 227403, 400942, 423693, 462110, 287995, 947497, 615089, 153386, 912058, 586362, 139148, 506003, 100818, 611592, 256074, 18115, 726260, 872321, 593097, 932329, 102236, 565261, 918958, 696808, 790263, 922708, 23028, 707398, 651514, 152574, 771421, 576419, 374520, 606852, 68938, 424227, 77339, 736611, 104271, 934578, 840629, 925778, 910892, 450941, 122839, 113264, 235960, 985064, 165558, 839088, 186363, 124691, 837680, 921050, 332222, 870093, 311515, 518955, 227447, 591409, 608032, 399093, 379392, 54774, 744418, 335273, 205627, 803035, 787968, 4634, 603858, 333575, 114294, 398259, 414598, 537517, 863713, 920063, 923169, 346425, 465806, 347032, 480946, 737668, 918662, 452320, 587201, 224656, 32855, 452542, 912956, 140889, 248283, 176427, 577763, 498481, 165551, 419020, 33887, 915052, 311544, 362476, 780672, 580720, 277650, 632407, 220147, 13098, 212729, 663687, 515290, 178077, 975762, 961287, 459093, 148697, 557431, 414718, 860826, 85369, 535191, 997099, 184505, 502309, 299664, 595520, 310007, 67092, 397408, 750130, 426886, 209953, 799963, 898257, 349466, 205186, 468338, 190731, 625117, 36558, 377812, 472174, 836754, 564969, 587586, 65724, 294111, 775703, 714221, 453391, 527767, 524509, 534577, 440863, 481197, 400854, 497124, 559767, 765529, 155276, 103005, 181970, 334439, 861980, 75521, 946329, 753416, 373394, 272364, 270806, 897633, 644145, 526698, 408827, 800931, 25393, 979152, 156188 };
            //Console.WriteLine(getMoneySpent(keyboards, drives, d));

            //Console.WriteLine(catAndMouse(1, 3, 2));

            //int[][] s = new int[][]
            //{
            //new int [] { 4, 9, 2 },
            //new int [] { 3, 5 ,7 },
            //new int [] { 8 ,1 ,5 }
            //};

            int[][] s = new int[][]
            {
            new int [] { 4, 8, 2 },
            new int [] { 4, 5, 7 },
            new int [] { 6, 1, 6 }
            };

            //int[][] s = new int[][]
            //{
            //new int [] {5 ,3, 4},
            //new int [] { 1 ,5, 8 },
            //new int [] { 6 ,4 ,2 }
            //};

            formingMagicSquare(s);

            Console.ReadLine();
        }

        static int getTotalX(int[] a, int[] b)
        {
            int quantityFactors = 0;
            int maxA = a.Max();
            int minB = b.Min();
            List<int> allMultipleNumbers = new List<int>();
            List<int> multiplesA = new List<int>();
            bool isFactor = false;

            foreach (var num in a)
            {
                for (int i = maxA; i <= minB; i++)
                {
                    if (i % num == 0)
                    {
                        if (allMultipleNumbers.Contains(i) && (allMultipleNumbers.Count(x => x == i) >= a.Length - 1)) multiplesA.Add(i);
                        allMultipleNumbers.Add(i);
                    }
                }
            }
            if (a.Length <= 1) multiplesA = allMultipleNumbers;

            for (int i = 0; i < multiplesA.Count; i++)
            {
                foreach (var num in b)
                {
                    if (num % multiplesA[i] == 0)
                    {
                        isFactor = true;
                    }
                    else
                    {
                        isFactor = false;
                        break;
                    }
                }
                quantityFactors = isFactor ? quantityFactors + 1 : quantityFactors;
            }
            return quantityFactors;
        }

        static string kangaroo(int x1, int v1, int x2, int v2)
        {
            var advancedPosition = x1 >= x2 ? x1 : x2;
            int k1 = x1;
            int k2 = x2;
            string result = "";

            if (advancedPosition == k1)
            {
                if (v1 >= v2) return "NO";
                while (k1 >= k2)
                {
                    k1 += v1;
                    k2 += v2;
                    if (k1 == k2) return result = "YES";

                }
                result = "NO";

            }
            else
            {
                if (v2 >= v1) return "NO";
                while (k2 >= k1)
                {
                    k1 += v1;
                    k2 += v2;
                    if (k1 == k2) return result = "YES";
                }
                result = "NO";

            }
            return result;
        }

        static void countApplesAndOranges(int s, int t, int a, int b, int[] apples, int[] oranges)
        {
            int quantityApplesInHouse = 0;
            int quantityOrangesInHouse = 0;

            foreach (var applePosition in apples)
            {
                quantityApplesInHouse = Between(applePosition + a, s, t, false) ? quantityApplesInHouse + 1 : quantityApplesInHouse;
            }

            foreach (var orangePosition in oranges)
            {
                quantityOrangesInHouse = Between(orangePosition + b, s, t, false) ? quantityOrangesInHouse + 1 : quantityOrangesInHouse;
            }
            Console.WriteLine(quantityApplesInHouse);
            Console.WriteLine(quantityOrangesInHouse);

        }

        public static bool Between(int num, int lower, int upper, bool inclusive = false)
        {
            return inclusive = lower <= num && num <= upper
                ? true
                : false;
        }

        static int[] gradingStudents(int[] grades)
        {
            var arr = new List<int>();
            var temp = 0;

            for (int i = 0; i < grades.Length; i++)
            {
                temp = grades[i];
                var grade = temp < 38
                    ? temp
                    : temp <= 40
                        ? 40
                        : Math.Round(Convert.ToDouble(temp) / 5) * 5 < temp
                            ? temp
                            : Math.Round(Convert.ToDouble(temp) / 5) * 5;

                arr.Add(Convert.ToInt32(grade));
            }
            return arr.ToArray();

        }

        public static int diagonalDifference(int[][] arr)
        {
            int primaryTemp = 0;
            int secondaryTemp = 0;
            int secondaryDiagonal = 0;
            int primaryDiagonal = 0;

            for (int i = 0; i < arr.Length; i++)
            {
                primaryTemp = arr[i][i];
                primaryDiagonal += primaryTemp;
            }
            int x = 0;
            for (int j = arr.Length - 1; j >= 0; j--)
            {
                secondaryTemp = arr[x][j];
                secondaryDiagonal += secondaryTemp;
                x++;
            }
            var sum = primaryDiagonal - secondaryDiagonal;
            var difference = sum < 0 ? sum * (-1) : sum;

            return difference;
        }

        public static void plusMinus(int[] arr)
        {
            double negatives = 0;
            double positives = 0;
            double zeros = 0;
            double size = arr.Length;

            foreach (var number in arr)
            {
                negatives = number < 0 ? negatives + 1 : negatives;
                positives = number > 0 ? positives + 1 : positives;
                zeros = number == 0 ? zeros + 1 : zeros;
            }

            Console.WriteLine(Math.Round(positives / size, 6).ToString("N6"));
            Console.WriteLine(Math.Round(negatives / size, 6).ToString("N6"));
            Console.WriteLine(Math.Round(zeros / size, 6).ToString("N6"));

        }

        static void staircase(int n)
        {
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine(new String('#', i + 1).PadLeft(n, ' '));
            }
        }

        static void miniMaxSum(int[] arr)
        {
            var list = arr.OrderBy(x => x).ToList();
            long min = 0;
            long max = 0;

            for (int i = 0; i < list.Count() - 1; i++)
            {
                min += list[i];
            }

            for (int j = list.Count() - 1; j >= 1; j--)
            {
                max += list[j];
            }

            Console.WriteLine($"{min} {max}");
        }

        static int birthdayCakeCandles(int[] ar)
        {
            int max = ar.Max();
            int qtdBlowOut = ar.Where(x => x == max).Count();
            return qtdBlowOut;
        }

        static string timeConversion(string s)
        {
            var cultureDest = new CultureInfo("pt-BR", false);
            var datetime = DateTime.Parse(s, cultureDest);
            return datetime.ToString("HH:mm:ss", cultureDest);
        }

        static string dayOfProgrammer(int year)
        {
            string dayOfProgrammer = "";
            dayOfProgrammer = year == 1918
                                ? "26.09.1918"
                : ((year <= 1917) && (year % 4 == 0)) || ((year % 400 == 0) || (year % 4 == 0)) && (year % 100 != 0) || ((year > 1917) && (DateTime.IsLeapYear(year)))
                    ? $"12.09.{year}"
                    : $"13.09.{year}";

            return dayOfProgrammer;
        }

        static void bonAppetit(List<int> bill, int k, int b)
        {
            int anaDontPay = bill[k];
            int anaPaid = b;
            int anaHaveToPay = ((bill.Sum() - anaDontPay)) / 2;
            var chargeAmount = anaPaid - anaHaveToPay;
            var msg = chargeAmount > 0 ? chargeAmount.ToString() : "Bon Appetit";
            Console.WriteLine(msg);
        }

        static int sockMerchant(int n, int[] ar)
        {
            return ar.GroupBy(l => l)
                         .Select(lg =>
                               new
                               {
                                   Num = lg.Key,
                                   Quant = lg.Count(),
                                   QuantPairs = lg.Count() % 2 == 0 ? lg.Count() / 2 : (int)Math.Abs(Convert.ToDecimal(lg.Count() / 2))
                               }.QuantPairs).Sum();
        }

        static int pageCount(int n, int p)
        {
            const int FIRSTPAGE = 1;
            int startPage = n - p <= p - FIRSTPAGE ? n : FIRSTPAGE;

            var i = startPage > p ? startPage - p : p - startPage;

            return startPage != n
                ? i > 1
                    ? startPage == FIRSTPAGE
                        ? (int)Math.Ceiling(Convert.ToDouble(i) / 2)
                        : i / 2
                    : i
                : i == 1 && n % 2 == 0
                    ? i
                    : i / 2;
        }

        static int countingValleys(int n, string s)
        {
            var path = s.ToCharArray();
            int valley = 0;
            int atualLevel = 0;
            int temp = 0;

            for (int i = 0; i < path.Length; i++)
            {
                temp = path[i] == 'D' ? atualLevel - 1 : atualLevel + 1;
                valley = atualLevel < 0 && temp == 0 ? valley + 1 : valley;
                atualLevel = temp;
            }

            return valley;
        }

        static int getMoneySpent(int[] keyboards, int[] drives, int b)
        {
            int temp = 0;
            int moneySpent = 0;
            for (int j = 0; j < keyboards.Length; j++)
            {
                for (int i = 0; i < drives.Length; i++)
                {
                    temp = keyboards[j] + drives[i];

                    moneySpent = moneySpent <= temp && temp <= b
                                            ? temp
                                            : moneySpent;


                }
            }
            return moneySpent == 0 ? -1 : moneySpent;
        }

        static string catAndMouse(int x, int y, int z)
        {
            return Math.Abs(x - z) < Math.Abs(y - z)
                ? "Cat A"
                : Math.Abs(x - z) == Math.Abs(y - z)
                    ? "Mouse C"
                    : "Cat B";
        }

        static int formingMagicSquare(int[][] s)
        {
            const int SIZEMAGICSQUARE = 15;
            int totalCost = 0;

            var list = new List<int>();

            while (list.Count() == 0 || list.GroupBy(x => x).ToList().Count() > 1)
            {
                var firstRow = s[0][0] + s[0][1] + s[0][2];
                var secondRow = s[1][0] + s[1][1] + s[1][2];
                var thirdRow = s[2][0] + s[2][1] + s[2][2];

                var firstColumn = s[0][0] + s[1][0] + s[2][0];
                var secondColumn = s[0][1] + s[1][1] + s[2][1];
                var thirdColumn = s[0][2] + s[1][2] + s[2][2];

                var leftDiagonal = s[0][0] + s[1][1] + s[2][2];
                var rightDiagonal = s[0][2] + s[1][1] + s[2][0];

                var ar = new int[] { firstRow, secondRow, thirdRow, firstColumn, secondColumn, thirdColumn, leftDiagonal, rightDiagonal };

                //VERIFICANDO OS VERTICES DA MATRIZ
                //Canto esquerdo cima
                if (firstRow != SIZEMAGICSQUARE && firstColumn != SIZEMAGICSQUARE && firstRow == firstColumn && firstRow == leftDiagonal)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - firstRow);
                    totalCost += difference;
                    s[0][0] = firstRow > SIZEMAGICSQUARE ? s[0][0] - difference : s[0][0] + difference;
                }

                //Canto direito cima
                if (firstRow != SIZEMAGICSQUARE && thirdColumn != SIZEMAGICSQUARE && firstRow == thirdColumn && firstRow == rightDiagonal)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - firstRow);
                    totalCost += difference;
                    s[0][2] = firstRow > SIZEMAGICSQUARE ? s[0][2] - difference : s[0][2] + difference;
                }

                //Canto esquerdo baixo
                if (thirdRow != SIZEMAGICSQUARE && firstColumn != SIZEMAGICSQUARE && thirdRow == firstColumn && thirdRow == rightDiagonal)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - thirdRow);
                    totalCost += difference;
                    s[2][0] = thirdRow > SIZEMAGICSQUARE ? s[2][0] - difference : s[2][0] + difference;
                }

                //Canto direito baixo
                if (thirdRow != SIZEMAGICSQUARE && thirdColumn != SIZEMAGICSQUARE && thirdRow == thirdColumn && thirdRow == leftDiagonal)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - thirdRow);
                    totalCost += difference;
                    s[2][2] = thirdRow > SIZEMAGICSQUARE ? s[2][2] - difference : s[2][2] + difference;
                }

                if (secondRow != SIZEMAGICSQUARE && secondColumn != SIZEMAGICSQUARE && secondRow == secondColumn)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - secondRow);
                    totalCost += difference;
                    s[1][1] = secondRow > SIZEMAGICSQUARE ? s[1][1] - difference : s[1][1] + difference;
                }

                if (thirdRow != SIZEMAGICSQUARE && thirdColumn != SIZEMAGICSQUARE && thirdRow == thirdColumn)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - thirdRow);
                    totalCost += difference;
                    s[2][2] = thirdRow > SIZEMAGICSQUARE ? s[2][2] - difference : s[2][2] + difference;
                }



                //CRIAR OUTRA CONDIÇÃO PARA NÃO PERMITIR A DUPLICAÇÃO DOS NUMEROS CENTRAIS

                //VERIFICANDO OS CANTOS CENTRAIS DA MATRIZ
                if (firstRow != SIZEMAGICSQUARE && secondColumn != SIZEMAGICSQUARE && firstRow == secondColumn)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - firstRow);
                    totalCost += difference;
                    s[0][1] = firstRow > SIZEMAGICSQUARE ? s[0][1] - difference : s[0][1] + difference;
                }

                if (secondRow != SIZEMAGICSQUARE && firstColumn != SIZEMAGICSQUARE /*&& secondRow == firstColumn*/)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - secondRow);
                    totalCost += difference;
                    s[1][0] = secondRow > SIZEMAGICSQUARE ? s[1][0] - difference : s[1][0] + difference;
                }

                if (secondRow != SIZEMAGICSQUARE && thirdColumn != SIZEMAGICSQUARE && secondRow == thirdColumn)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - firstRow);
                    totalCost += difference;
                    s[0][0] = secondRow > SIZEMAGICSQUARE ? s[0][0] - difference : s[0][0] + difference;
                }

                if (thirdRow != SIZEMAGICSQUARE && secondColumn != SIZEMAGICSQUARE && thirdRow == secondColumn)
                {
                    var difference = Math.Abs(SIZEMAGICSQUARE - thirdRow);
                    totalCost += difference;
                    s[1][2] = thirdRow > SIZEMAGICSQUARE ? s[1][2] - difference : s[1][2] + difference;
                }

                list.Clear();
                list.AddRange(ar);
            }

            return totalCost;
        }
    }
}
